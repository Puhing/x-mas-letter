<%-include('header.ejs')%>

<div class = "chatPage">
    <div class = topChat>
        <div class = "roomList" id="room-list"></div>
        <div class = "chatSpace" id="message-container"></div>
    </div>
    <form class = "formBox" id = "form">
        <div class = "roomForm" id = "room-form">
            <label class = "roomLabel" for = "room-input"> Room </label>
            <input class = "roomInput" type = "text" id = "room-input"></input>
            <button class = "joinButton" type = "button" id = "room-button"> Join </button>
        </div>
        <div class = "messageForm" id = "message-form">
            <label class = "messageLabel" for = "message-input"> Message </label>
            <input class = "messageInput" type = "text" id = "message-input"></input>
            <button class = "sendButton" type = "submit" id = "send-button"> Send </button>
        </div>
        <button class = "leaveButton" type = "button" id = "leave-button"> leave </button>
    </form>
</div>

<script>
    const joinRoomButton = document.getElementById ("room-button")
    const leaveRoomButton = document.getElementById ("leave-button")
    const messageInput = document.getElementById ("message-input")
    const roomInput = document.getElementById ("room-input")
    const form = document.getElementById ("form")

    const socket = io('http://localhost:3000')

    const publicRoom = "public";
    var nickname, email, visit;
    var userId = getCookie('userId');
    var myVisit = '';

    $.ajax({
        url: '/user/handshake',
        async: true,
        type: 'POST',
        data: {
            userId: userId,
        },
        dataType: 'json',
        success: function (data) {
            if (data.status == 1) {
                nickname = data.user.nickname;
                email = data.user.email;
                myVisit = data.user.uuid;
                console.log(data, nickname, 'ajax로 Handshake');

                displayMessage(`You connected with id: ${nickname} (${socket.id})`);
                displayRoomList("공개방");

            } else {
                alert(data.msg);
            }
        },
        error: function (err) {
            alert('FAILURE : ', err.msg);
        },
    });

    // socket.on('connect', () => {
    //     displayMessage(`You connected with id: ${nickname}`)
    //     displayRoomList("공개방")
    // })

    socket.on('receive-message', message => {
        displayMessage(message)
    })

    socket.on('left-message', message => {
        displayMessage(message)
    })

    socket.on('updateRoomList', (room) => {
        // if (socket.id == socket.adapter.rooms.)

        displayRoomList(room)
        console.log('방 생성:', room)
    });

    form.addEventListener("submit", e => {
        e.preventDefault()
        const message = messageInput.value
        const room = roomInput.value

        if (message === "") return
        displayMessage(message)
        socket.emit("send-message", message, room)

        messageInput.value = ""
    })

    joinRoomButton.addEventListener("click", () => {
        const room = roomInput.value
        socket.emit("join-room", room, message => {
            displayMessage(message)
            console.log(room, '룸 정보')
            // roomInput.value = "";
        })
    })

    leaveRoomButton.addEventListener("click", () => {
        const room = roomInput.value
        socket.emit("leave-room", room)
        console.log(room, '방 나가기')
    })

    function displayMessage(message) {
        const div = document.createElement("div")
        div.textContent = message
        document.getElementById("message-container").append(div)
    }

    function displayRoomList(room) {
        const div = document.createElement("div")
        div.textContent = `방이름: ${room}`
        document.getElementById("room-list").append(div)
    }

</script>

<%-include('footer.ejs')%>
