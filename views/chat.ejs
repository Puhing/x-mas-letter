<%-include('header.ejs')%>

<div class = "chatPage">
    <div class = topChat>
        <div class = "roomList" id="room-list"></div>
        <div class = "chatSpace" id="message-container">
            <div class = "topToolBar" id="toptool-bar">
                <div class = "currentRoom" id="current-room">현재 채팅방:</div>
                <button class = "leaveButton" type = "button" id = "leave-button"> leave </button>
            </div>
        </div>
    </div>
    <form class = "formBox" id = "form">
        <div class = "roomForm" id = "room-form">
            <label class = "roomLabel" for = "room-input"> Room </label>
            <input class = "roomInput" type = "text" id = "room-input"></input>
            <button class = "joinButton" type = "button" id = "room-button"> Join </button>
        </div>
        <div class = "messageForm" id = "message-form">
            <label class = "messageLabel" for = "message-input"> Message </label>
            <input class = "messageInput" type = "text" id = "message-input"></input>
            <button class = "sendButton" type = "submit" id = "send-button"> Send </button>
        </div>
        <div class="fileForm">
            <!-- <input class = "fileInput" type="file" id="file-input" accept="audio/*,image/*" /> -->
            <div class = "fileName">첨부파일</div>
            <label class = "fileSearch" for="file">파일찾기</label> 
            <input class = "fileInput" type="file" id="file">
            <button class = "fileSend" onclick="sendFile()">Send File</button>
        </div>
    </form>
</div>

<script>
    const joinRoomButton = document.getElementById ("room-button")
    const leaveRoomButton = document.getElementById ("leave-button")
    const messageInput = document.getElementById ("message-input")
    const roomInput = document.getElementById ("room-input")
    const form = document.getElementById ("form")

    const socket = io('http://localhost:3000')

    const publicRoom = "public";
    const existingRooms = [];
    var nickname, email, visit;
    var userId = getCookie('userId');
    var messageForSave = '';
    var nicknameForSave = '';
    var url = new URL(location.href);
    var roomNow = 'public';
    
    visit = url.searchParams.get('visit');

    window.onload = function () {
        $.ajax({
            url: '/user/handshake',
            async: true,
            type: 'POST',
            data: {
                userId: userId,
            },
            dataType: 'json',
            success: function (data) {
                if (data.status == 1) {
                    nickname = data.user.nickname;
                    email = data.user.email;
                    visit = data.user.uuid;
                    console.log(data, nickname, 'ajax로 Handshake');

                    nicknameForSave = nickname

                    displayMessage(`You connected with id: ${nickname} (${socket.id})`);
                    displayRoomList("public");

                } else {
                    alert(data.msg);
                }
            },
            error: function (err) {
                alert('FAILURE : ', err.msg);
            },
        });

        // socket.on('connect', () => {
        //     displayMessage(`You connected with id: ${nickname}`)
        //     displayRoomList("공개방")
        // })

        socket.emit("join", publicRoom);

        socket.on("joined", (publicRoom) => {
            console.log(`처음방입장: ${publicRoom}`);
            $('#current-room')[0].innerHTML = `현재 채팅방: ${publicRoom}`;
        });

        socket.on('receive-message', message => {
            displayMessage(message)
        })

        socket.on('left-message', message => {
            displayMessage(message)
        })

        socket.on('updateRoomList', (room) => {
            // if (socket.id == socket.adapter.rooms.)

            displayRoomList(room)
            console.log('방 생성:', room)
            console.log('방 목록:', existingRooms)
        });

        form.addEventListener("submit", e => {
            e.preventDefault()
            const message = messageInput.value
            const room = roomInput.value

            if (message === "") return
            displayMessage(message)
            socket.emit("send-message", message, room)
            messageForSave = message;
            saveChat()

            messageInput.value = ""
        })

        joinRoomButton.addEventListener("click", () => {
            const room = roomInput.value
            socket.emit("join-room", room, message => {
                displayMessage(message)
                console.log(room, '룸 정보')
                $('#current-room')[0].innerHTML = `현재 채팅방: ${room}`;
                roomNow = room;
                // roomInput.value = "";
            })
        })

        leaveRoomButton.addEventListener("click", () => {
            removeRoomList(roomNow)
            socket.emit("leave-room", roomNow)
            roomNow = existingRooms[existingRooms.length - 1];
            $('#current-room')[0].innerHTML = `현재 채팅방: ${roomNow}`;
            console.log(roomNow, '방 나가기')
        })

        $("#file").on('change',function(){
            var changeFileName = $("#file").val();
            $(".fileName")[0].innerHTML = changeFileName;
        });
    }

    function displayMessage(message) {
        const div = document.createElement("div")
        div.textContent = message
        document.getElementById("message-container").append(div)
    }

    function displayRoomList(room) {

        if (existingRooms.includes(room)) {
            // 이미 존재하는 방이면 아무 작업도 하지 않음
            $('#current-room')[0].innerHTML = `현재 채팅방: ${room}`;
            return;
        }
        const div = document.createElement("div")
        div.textContent = `방이름: ${room}`
        div.id = `room-${room}`; // 고유한 id 부여

        div.addEventListener("click", function() {
            socket.emit("join-room", room, message => {
                displayMessage(message)
                $('#current-room')[0].innerHTML = `현재 채팅방: ${room}`;
                roomNow = room;
                console.log(room, '룸 정보22')
                // roomInput.value = "";
            })
            alert(`클릭한 방: ${room}`);
        });

        document.getElementById("room-list").append(div)

        existingRooms.push(room);
    }

    function removeRoomList(room) {
        const divToRemove = document.getElementById(`room-${room}`);
        if (divToRemove) {
            document.getElementById("room-list").removeChild(divToRemove);
            // 배열에서도 제거
            existingRooms.splice(existingRooms.indexOf(room), 1);
        }
    }

    function saveChat() {
        $.ajax({
            url: '/chat/save_chat',
            async: true,
            type: 'POST',
            data: {
                nickname: nicknameForSave,
                content: messageForSave,
                socketId: socket.id,
                visit: visit,
                roomNow: roomNow,
            },
            dataType: 'json',
            success: function (data) {
                if (data.status == 1) {
                    console.log(roomNow, '성공', data)
                } else {
                    console.log(roomNow, '엥', data.msg);
                }
            },
            error: function (err) {
                console.log('FAILURE : ', err.msg);
            },
        });
    }

</script>

<%-include('footer.ejs')%>
