<%-include('header.ejs')%>

<div class = "chatPage">
    <div class = topChat>
        <div class = "roomList" id="room-list"></div>
        <div class = "chatSpace" id="message-container">
            <div class = "topToolBar" id="toptool-bar">
                <div class = "currentRoom" id="current-room">현재 채팅방:</div>
                <button class = "leaveButton" type = "button" id = "leave-button"> leave </button>
            </div>
            <div class = "connectNow" id="connect-now"></div>
            <div class = "messageBox" id="message-box"></div>
        </div>
    </div>
    <form class = "formBox" id = "form">
        <div class = "roomForm" id = "room-form">
            <label class = "roomLabel" for = "room-input"> Room </label>
            <input class = "roomInput" type = "text" id = "room-input" />
            <button class = "joinButton" type = "button" id = "room-button"> Join </button>
        </div>
        <div class="fileForm">
            <!-- <input class = "fileInput" type="file" id="file-input" accept="audio/*,image/*" /> -->
            <div class = "fileName">첨부파일</div>
            <label class = "fileSearch" for="file-input">
                <img src = img/plus.png>
            </label> 
            <input class = "fileInput" type="file" id="file-input">
            <!-- <button class = "fileSend" onclick="sendFile()">Send File</button> -->
        </div>
        <div class = "messageForm" id = "message-form">
            <label class = "messageLabel" for = "message-input"> Message </label>
            <input class = "messageInput" type = "text" id = "message-input"></input>
            <button class = "sendButton" type = "submit" id = "send-button"> Send </button>
        </div>
    </form>
</div>

<script>
    const joinRoomButton = document.getElementById ("room-button")
    const leaveRoomButton = document.getElementById ("leave-button")
    const messageInput = document.getElementById ("message-input")
    const roomInput = document.getElementById ("room-input")
    const form = document.getElementById ("form")
    const fileInput = document.getElementById('file-input');

    const socket = io('http://localhost:3000')

    const publicRoom = "public";
    var existingRooms = [];

    var socketIds, contents, times, nicknames, roomNames, dataLength;
    var nickname, email, visit;
    var userId = getCookie('userId');
    var messageForSave = '';
    var nicknameForSave = '';
    // var roomForSave = '';
    var url = new URL(location.href);
    var roomNow = 'public';
    var myId;
    
    visit = url.searchParams.get('visit');

    window.onload = function () {
        $.ajax({
            url: '/user/handshake',
            async: true,
            type: 'POST',
            data: {
                userId: userId,
            },
            dataType: 'json',
            success: function (data) {
                if (data.status == 1) {
                    nickname = data.user.nickname;
                    email = data.user.email;
                    visit = data.user.uuid;
                    console.log(data, nickname, 'ajax로 Handshake');

                    nicknameForSave = data.user.nickname;

                    displayConnect(`You connected with id: ${nickname} (${socket.id})`);
                    displayRoomList("public");

                    socket.emit("nickname", { nickname: nicknameForSave }, () => {
                        console.log('닉네임보내기', nicknameForSave)
                    });

                } else {
                    alert(data.msg);
                }
            },
            error: function (err) {
                alert('FAILURE : ', err.msg);
            },
        });

        $.ajax({
            url: '/chat/backup',
            async: true,
            type: 'GET',
            data: {
                userId: userId,
            },
            success: function (data) {
                if (data.status == 1) {
                    console.log("디비에서정보",data,"가져오기")
                    socketIds = data.datas.map(item => item.socketId);
                    contents = data.datas.map(item => item.content);
                    times = data.datas.map(item => item.time);
                    nicknames = data.datas.map(item => item.nickname);
                    roomNames = data.datas.map(item => item.room);
                    dataLength = data.datas.length;
                    console.log(socketIds[0] + contents[0] + times [0] + nicknames[0] + roomNames[0], "룸기준데이터 row", data.datas.length);

                    const noDupRoom = [...new Set(roomNames)];
                    for (let i = 0; i < noDupRoom.length; i ++) {
                        displayRoomList(noDupRoom[i])
                    }
                    for (let i = 0; i < data.datas.length; i ++) {
                        if (roomNames[i] === "public") {
                            if (nicknameForSave === nicknames[i]){
                                displayMyOldMessage(`${nicknames[i]}: <br> ${contents[i]} <br>`)
                            } else {
                                displayOldMessage(`${nicknames[i]}: <br> ${contents[i]} <br>`)
                            }
                        }   
                    } 
                }
            },
            error: function (err) {
                console.log('FAILURE : ', err.msg);
                window.location.href = '/';
            },
        });

        setInterval(backupChat, 1000);

        socket.on("welcome", id => {
            myId = id;
        })

        socket.emit("join", publicRoom);

        socket.on("joined", (publicRoom) => {
            console.log(`처음방입장: ${publicRoom}`);
            $('#current-room')[0].innerHTML = `현재 채팅방: ${publicRoom}`;
        });

        socket.on('receive-message', response => {
            if (response.roomName === roomNow) {
                displayMessage(`${response.nickname} (${response.userId}): <br> ${response.message}`)
                console.log('딴놈메세지', response, '딴놈메세지')
            }else{
                console.log('딴방 메세지', response, '딴방 메세지')
            }
        })

        socket.on('left-message', message => {
            displayMessage(message)
        })

        socket.on('updateRoomList', (room) => {
            // if (socket.id == socket.adapter.rooms.)

            displayRoomList(room)
            console.log('방 생성:', room)
            console.log('방 목록:', existingRooms)
        });

        socket.on('receive-file', (fileData) => {
            const { type, data } = fileData;

            // Handle different file types
            switch (type) {
            case 'audio':
                // Handle audio file
                displayAudio(data);
                saveAudio(data);
                break;
            case 'image':
                // Handle image file
                displayImage(data);
                saveImg(data);
                // socket.emit('save-img', data)
                break;
            case 'webm':
                displayVideo(data); // WebM 파일을 오디오로 처리
                saveVideo(data);
                break;
            case 'video':
                // Handle video file
                displayVideo(data);
                saveVideo(data);
                break;
            default:
                console.log('Unsupported file type');
            }
        });

        form.addEventListener("submit", e => {
            e.preventDefault()
            const message = messageInput.value

            if (message === "") return
            displayMyMessage(message)
            socket.emit("send-message", message, roomNow, nicknameForSave)
            console.log(roomNow,'특정방메세지보내고픔');
            messageForSave = message;
            saveChat()

            messageInput.value = "";
        })

        joinRoomButton.addEventListener("click", () => {
            const room = roomInput.value
            roomNow = roomInput.value
            socket.emit("join-room", roomNow, message => {
                displayMessage(message)
                console.log(roomNow, '룸 정보')
                $('#current-room')[0].innerHTML = `현재 채팅방: ${roomNow}`;
                roomNow = room;
            })
            roomInput.value = "";
        })

        leaveRoomButton.addEventListener("click", () => {
            removeRoomList(roomNow)
            socket.emit("leave-room", roomNow)
            roomNow = existingRooms[existingRooms.length - 1];
            $('#current-room')[0].innerHTML = `현재 채팅방: ${roomNow}`;
            console.log(roomNow, '방 나가기')
        })

        $("#file-input").on('change',function(){
            var changeFileName = $("#file-input").val();
            $(".fileName")[0].innerHTML = changeFileName;
        });

        fileInput.addEventListener('change', () => {
            sendFile();
        });
    }

    function displayConnect(message) {
        const div = document.createElement("div");
        div.textContent = message;
        document.getElementById("connect-now").append(div);
        div.classList.add("connectNow");
    }

    function displayMessage(message) {
        const currentDate = new Date();
        const hours = currentDate.getHours();
        const minutes = currentDate.getMinutes();

        const div = document.createElement("div")
        div.innerHTML = `${message}<br>${hours}:${minutes}`
        document.getElementById("message-box").append(div)
        div.classList.add("otherMessage");

        const messageBox2 = document.getElementById("message-container");
        messageBox2.scrollTop = messageBox2.scrollHeight;

    }

    function displayOldMessage(message) {
        const div = document.createElement("div")
        div.innerHTML = `${message}`
        document.getElementById("message-box").append(div)
        div.classList.add("otherMessage");

        const messageBox2 = document.getElementById("message-container");
        messageBox2.scrollTop = messageBox2.scrollHeight;
    }

    function displayMyMessage(message) {
        const currentDate = new Date();
        const hours = currentDate.getHours();
        const minutes = currentDate.getMinutes();

        const div = document.createElement("div")
        div.innerHTML = `${message}<br>${hours}:${minutes}`
        document.getElementById("message-box").append(div)
        div.classList.add("myMessage");

        const messageBox2 = document.getElementById("message-container");
        messageBox2.scrollTop = messageBox2.scrollHeight;
    }

    function displayMyOldMessage(message) {
        const div = document.createElement("div")
        div.innerHTML = `${message}`
        document.getElementById("message-box").append(div)
        div.classList.add("myMessage");

        const messageBox2 = document.getElementById("message-container");
        messageBox2.scrollTop = messageBox2.scrollHeight;
    }

    function displayRoomList(room) {

        if (existingRooms.includes(room)) {
            // 이미 존재하는 방이면 아무 작업도 하지 않음
            $('#current-room')[0].innerHTML = `현재 채팅방: ${room}`;
            return;
        }
        const div = document.createElement("div")
        div.textContent = `방이름: ${room}`
        div.id = `room-${room}`; // 고유한 id 부여

        div.addEventListener("click", function() {
            if(roomNow !== room){
                const removeMessage = document.getElementById("message-box");
                while (removeMessage.firstChild){
                    removeMessage.removeChild(removeMessage.firstChild);
                }
            }
            socket.emit("join-room", room, message => {
                displayMessage(message)
                $('#current-room')[0].innerHTML = `현재 채팅방: ${room}`;
                roomNow = room;
                console.log(room, '룸 정보22')
                // roomInput.value = "";
            })
            alert(`클릭한 방: ${room}`)

            console.log(roomNames);

            for (let i = 0; i < dataLength; i ++) {
                if (roomNames[i] === room) {
                    if (nicknameForSave === nicknames[i]){
                        displayMyOldMessage(`${nicknames[i]}: <br> ${contents[i]} <br>`)
                    } else {
                        displayOldMessage(`${nicknames[i]}: <br> ${contents[i]} <br>`)
                    }
                }   
            } 
        })

        document.getElementById("room-list").append(div)

        existingRooms.push(room);
    }

    function removeRoomList(room) {
        const divToRemove = document.getElementById(`room-${room}`);
        if (divToRemove) {
            document.getElementById("room-list").removeChild(divToRemove);
            // 배열에서도 제거
            existingRooms.splice(existingRooms.indexOf(room), 1);
        }
    }

    function saveChat() {
        $.ajax({
            url: '/chat/save_chat',
            async: true,
            type: 'POST',
            data: {
                nickname: nicknameForSave,
                content: messageForSave,
                socketId: socket.id,
                visit: visit,
                roomNow: roomNow,
            },
            dataType: 'json',
            success: function (data) {
                if (data.status == 1) {
                    console.log(roomNow, '성공', data)
                } else {
                    console.log(roomNow, '엥', data.msg);
                }
            },
            error: function (err) {
                console.log('FAILURE : ', err.msg);
            },
        });
    }

    function saveImg(data) {
        var fd = new FormData();
        const blob = dataURItoBlob(data);

        fd.append('nickname', nicknameForSave);
        fd.append('file', blob);
        fd.append('socketId', socket.id);
        fd.append('visit', visit);
        fd.append('roomNow', roomNow);

        $.ajax({
            url: '/chat/save_img',
            async: true,
            type: 'POST',
            data: fd,
            contentType: false,
            processData: false,
            success: function (data) {
                if (data.status == 1) {
                    console.log(roomNow, '성공', data)
                } else {
                    console.log(roomNow, '엥', data.msg);
                }
            },
            error: function (err) {
                console.log('FAILURE : ', err.msg);
            },
        });
    }

    function dataURItoBlob(dataURI) {
    // dataURI에서 콤마 뒤의 데이터 부분을 가져옵니다.
    const byteString = atob(dataURI.split(',')[1]);

    // ArrayBuffer를 생성합니다.
    const ab = new ArrayBuffer(byteString.length);

    // ArrayBuffer에 대한 뷰를 생성합니다.
    const ia = new Uint8Array(ab);

    // 뷰에 데이터를 복사합니다.
    for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }

    // Blob 객체를 반환합니다.
    return new Blob([ab], { type: 'image/png' });
    }

    function saveAudio(data) {
        var audio = [data] ;
        var fd = new FormData();
        const blob = new Blob(audio, { type: 'audio/aac' });

        fd.append('nickname', nicknameForSave);
        fd.append('file', blob);
        fd.append('socketId', socket.id);
        fd.append('visit', visit);
        fd.append('roomNow', roomNow);
        console.log(fd, '폼데데데데데이이이이이타타타타타');

        $.ajax({
            url: '/chat/save_audio',
            async: true,
            type: 'POST',
            data: fd,
            contentType: false,
            processData: false,
            success: function (data) {
                if (data.status == 1) {
                    console.log(roomNow, '성공', data)
                } else {
                    console.log(roomNow, '엥', data.msg);
                }
            },
            error: function (err) {
                console.log('FAILURE : ', err.msg);
            },
        });
    }

    function saveVideo(data) {
        var audio = [data] ;
        var fd = new FormData();
        const blob = new Blob(audio, { type: 'audio/webm' });

        fd.append('nickname', nicknameForSave);
        fd.append('file', blob);
        fd.append('socketId', socket.id);
        fd.append('visit', visit);
        fd.append('roomNow', roomNow);
        console.log(fd, '폼데데데데데이이이이이타타타타타');

        $.ajax({
            url: '/chat/save_video',
            async: true,
            type: 'POST',
            data: fd,
            contentType: false,
            processData: false,
            success: function (data) {
                if (data.status == 1) {
                    console.log(roomNow, '성공', data)
                } else {
                    console.log(roomNow, '엥', data.msg);
                }
            },
            error: function (err) {
                console.log('FAILURE : ', err.msg);
            },
        });
    }

    function sendFile() {
        const file = fileInput.files[0];
        console.log(fileInput.files[0], '파일인풋정보');
        if (file) {
            const reader = new FileReader();

            reader.onload = function (e) {
                const base64Data = e.target.result;
                const fileType = file.type.split('/')[0]; // Extract file type (audio or image)

                // Send file data to the server
                socket.emit('send-file', { type: fileType, data: base64Data });
            };

            reader.readAsDataURL(file);
        } else {
            alert('Please choose a file first.');
        }
    }

    // Display audio in the chat
    function displayAudio(data) {
        const audio = document.createElement('audio');
        audio.controls = true;
        audio.src = data;
        document.getElementById("message-container").append(audio);
    }

    // Display image in the chat
    function displayImage(data) {
        const img = document.createElement('img');
        img.src = data;
        document.getElementById("message-container").append(img);
    }

    function displayVideo(data) {
        const video = document.createElement('video');
        video.controls = true;
        video.src = data;
        document.getElementById('message-container').append(video);
    }

    function backupChat() {
        $.ajax({
            url: '/chat/backup',
            async: true,
            type: 'GET',
            data: {
                userId: userId,
            },
            success: function (data) {
                if (data.status == 1) {
                    socketIds = data.datas.map(item => item.socketId);
                    contents = data.datas.map(item => item.content);
                    times = data.datas.map(item => item.time);
                    nicknames = data.datas.map(item => item.nickname);
                    roomNames = data.datas.map(item => item.room);
                    dataLength = data.datas.length;
                    console.log(socketIds[0] + contents[0] + times [0] + nicknames[0] + roomNames[0], "1초마다 디비정보 업데이트", data.datas.length);
                }
            },
            error: function (err) {
                console.log('FAILURE : ', err.msg);
                window.location.href = '/';
            },
        });    
    }

</script>

<%-include('footer.ejs')%>
